let g=null,d=!1,b=0;const M=5,C=2e4,L=500,E=1e4,F=1.5;let u=null;const A=["https://cdnjs.cloudflare.com/ajax/libs/stockfish.js/10.0.2/stockfish.js","/engine/stockfish.js","https://cdn.jsdelivr.net/npm/stockfish@14.1.0/stockfish.js","https://unpkg.com/stockfish@14.1.0/stockfish.js"];let w={};const _=5e3,j=3e5;let k=!1;self.onmessage=async e=>{const{cmd:t,payload:o}=e.data;switch(console.log(`Worker received command: ${t}`,o),t){case"init":!g&&!d?await X():g&&self.postMessage({type:"ready"});break;case"evaluate":await U(o);break;case"command":g&&typeof o=="string"&&(console.log(`Worker: Sending engine command: ${o}`),g.postMessage(o));break;case"stop":g&&(console.log("Worker: Stopping engine"),g.postMessage("stop")),u!=null&&u.timeoutId&&(clearTimeout(u.timeoutId),u=null);break;default:console.error(`Unknown command: ${t}`)}};async function z(e){const t=Date.now(),o=w[e];if(o&&t-o.lastChecked<j)return console.log(`Worker: Using cached availability for ${e}: ${o.available}`),o.available;console.log(`Worker: Checking availability of ${e}...`);try{const s=new AbortController,n=setTimeout(()=>s.abort(),_),r=await fetch(e,{method:"HEAD",signal:s.signal,mode:e.startsWith("/")?"same-origin":"cors",credentials:"omit",cache:"no-cache"});clearTimeout(n);const c=r.ok&&r.status===200;return w[e]={available:c,lastChecked:t},console.log(`Worker: URL ${e} availability: ${c} (status: ${r.status})`),c}catch(s){return console.warn(`Worker: URL availability check failed for ${e}:`,s),w[e]={available:!1,lastChecked:t},!1}}async function D(){console.log("Worker: Checking Stockfish URL availability...");for(const e of A)if(await z(e))return console.log(`Worker: Found working Stockfish URL: ${e}`),e;return console.warn("Worker: No working Stockfish URLs found, will use direct fallback"),null}async function U(e){if(k||!g){console.log(k?"Worker: Using direct fallback mode (no Stockfish URLs available)":"Worker: Engine not initialized, using fallback move generation");const i=await T(e.fen);if(i){console.log(`Worker: Generated direct fallback move: ${i}`),self.postMessage({type:"bestMove",move:i,source:"fallback",reason:k?"no_urls_available":"engine_not_ready"});return}self.postMessage({type:"error",message:"No engine available and fallback generation failed"});return}const t=e.attemptCount||1,o=e.maxTimeout||E,s=e.requestId||Date.now().toString(),n=e.movetime||L,r=Math.min(n*Math.pow(F,t-1),o);console.log(`Worker: Evaluation attempt ${t} with ${r}ms timeout`),u!=null&&u.timeoutId&&clearTimeout(u.timeoutId);const c=setTimeout(async()=>{console.warn(`Worker: Evaluation timeout after ${r}ms (attempt ${t})`);const i=Date.now()-((u==null?void 0:u.startTime)||Date.now());if(t<3&&i<o){console.log("Worker: Retrying evaluation with longer timeout..."),g&&g.postMessage("stop");const f={...e,attemptCount:t+1,requestId:s};setTimeout(()=>U(f),100);return}console.log("Worker: Max retries reached, attempting fallback move generation...");const l=await T(e.fen);l?(console.log(`Worker: Generated fallback move: ${l}`),self.postMessage({type:"bestMove",move:l,source:"fallback",reason:"timeout_fallback"})):self.postMessage({type:"error",message:`Evaluation failed after ${t} attempts and fallback unavailable`}),u=null},r);u={request:{...e,attemptCount:t,requestId:s},timeoutId:c,startTime:Date.now()};const a=Math.max(1,Math.min(e.depth||5,t+2));console.log(`Worker: Starting evaluation - Depth: ${a}, Time: ${r}ms`),g.postMessage(`position fen ${e.fen}`),g.postMessage(`go depth ${a} movetime ${r}`)}async function T(e){var t;try{console.log("Worker: Generating fallback move using basic algorithms...");const o=N(e);if(!o)return console.error("Worker: Failed to parse FEN for fallback"),null;const s=O(o);return s.length===0?(console.error("Worker: No legal moves available"),null):(console.log(`Worker: Found ${s.length} legal moves for fallback`),((t=V(s,o)[0])==null?void 0:t.move)||s[0])}catch(o){return console.error("Worker: Error in fallback move generation:",o),null}}function N(e){try{const t=e.split(" ");if(t.length<4)return null;const[o,s,n,r]=t,c=o.split("/"),a=[];for(const i of c){const l=[];for(const f of i)if(f>="1"&&f<="8"){const p=parseInt(f);for(let m=0;m<p;m++)l.push(null)}else l.push(f);a.push(l)}return{board:a,activeColor:s,castling:n,enPassant:r,isWhiteToMove:s==="w"}}catch(t){return console.error("Worker: FEN parsing error:",t),null}}function O(e){const t=[],{board:o,isWhiteToMove:s}=e;for(let n=0;n<8;n++)for(let r=0;r<8;r++){const c=o[n][r];if(!c||c===c.toUpperCase()!==s)continue;const i=x(c,n,r,o);t.push(...i)}return t}function x(e,t,o,s){const n=[],r=e.toLowerCase(),c=`${String.fromCharCode(97+o)}${8-t}`;switch(r){case"p":n.push(...P(e,t,o,s));break;case"r":n.push(...y(t,o,s,[[0,1],[0,-1],[1,0],[-1,0]]));break;case"n":n.push(...H(t,o,s));break;case"b":n.push(...y(t,o,s,[[1,1],[1,-1],[-1,1],[-1,-1]]));break;case"q":n.push(...y(t,o,s,[[0,1],[0,-1],[1,0],[-1,0],[1,1],[1,-1],[-1,1],[-1,-1]]));break;case"k":n.push(...K(t,o,s));break}return n.map(a=>`${c}${a}`)}function P(e,t,o,s){var l;const n=[],r=e===e.toUpperCase(),c=r?-1:1,a=r?6:1,i=t+c;i>=0&&i<8&&!s[i][o]&&(n.push(`${String.fromCharCode(97+o)}${8-i}`),t===a&&!((l=s[i+c])!=null&&l[o])&&n.push(`${String.fromCharCode(97+o)}${8-(i+c)}`));for(const f of[o-1,o+1])if(f>=0&&f<8&&i>=0&&i<8){const p=s[i][f];p&&p===p.toUpperCase()!==r&&n.push(`${String.fromCharCode(97+f)}${8-i}`)}return n}function y(e,t,o,s){const n=[],r=o[e][t],c=r===r.toUpperCase();for(const[a,i]of s)for(let l=1;l<8;l++){const f=e+a*l,p=t+i*l;if(f<0||f>=8||p<0||p>=8)break;const m=o[f][p];if(!m)n.push(`${String.fromCharCode(97+p)}${8-f}`);else{m===m.toUpperCase()!==c&&n.push(`${String.fromCharCode(97+p)}${8-f}`);break}}return n}function H(e,t,o){const s=[],n=o[e][t],r=n===n.toUpperCase(),c=[[-2,-1],[-2,1],[-1,-2],[-1,2],[1,-2],[1,2],[2,-1],[2,1]];for(const[a,i]of c){const l=e+a,f=t+i;if(l>=0&&l<8&&f>=0&&f<8){const p=o[l][f];(!p||p===p.toUpperCase()!==r)&&s.push(`${String.fromCharCode(97+f)}${8-l}`)}}return s}function K(e,t,o){const s=[],n=o[e][t],r=n===n.toUpperCase(),c=[[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]];for(const[a,i]of c){const l=e+a,f=t+i;if(l>=0&&l<8&&f>=0&&f<8){const p=o[l][f];(!p||p===p.toUpperCase()!==r)&&s.push(`${String.fromCharCode(97+f)}${8-l}`)}}return s}function V(e,t){return e.map(o=>({move:o,score:G(o,t)})).sort((o,s)=>s.score-o.score)}function G(e,t){let o=0;const{board:s}=t,n=e.charCodeAt(0)-97,r=8-parseInt(e[1]),c=e.charCodeAt(2)-97,a=8-parseInt(e[3]),i=s[r][n],l=s[a][c];if(l){const p={p:1,n:3,b:3,r:5,q:9,k:0},m=p[l.toLowerCase()]||0,h=p[i.toLowerCase()]||0;o+=m*10-h}const f=Math.abs(c-3.5)+Math.abs(a-3.5);return o+=(7-f)*.1,(r===0||r===7)&&(o+=.2),o}async function X(){if(d){console.log("Worker: Already initializing, skipping duplicate init request");return}if(b>=M){console.error(`Worker: Max initialization attempts (${M}) reached, giving up`),self.postMessage({type:"error",message:"Failed to initialize Stockfish engine after multiple attempts"});return}d=!0,b++,console.log(`Worker: Initializing Stockfish engine (attempt ${b}/${M})`);try{const e=await D();if(!e){console.warn("Worker: No working Stockfish URLs found, switching to direct fallback mode"),k=!0,d=!1,self.postMessage({type:"ready",fallbackMode:!0,message:"Engine ready in fallback mode - using built-in move generator"});return}const t=await B(e),o=new Blob([t],{type:"application/javascript"}),s=URL.createObjectURL(o),n=new Worker(s);console.log("Worker: Created Stockfish worker from blob URL");let r=setTimeout(()=>{console.error(`Worker: Stockfish initialization timed out after ${C/1e3} seconds`),d=!1,console.log("Worker: Switching to fallback mode due to initialization timeout"),k=!0,URL.revokeObjectURL(s),self.postMessage({type:"ready",fallbackMode:!0,message:"Engine ready in fallback mode after timeout"})},C);g={postMessage:c=>{n.postMessage(c)},onmessage:null},n.onmessage=c=>{const a=c.data;if(typeof a=="string"&&(a.includes("readyok")||a.includes("bestmove"))&&console.log(`Worker received from engine: ${a.substring(0,100)}${a.length>100?"...":""}`),typeof a=="string"&&a.includes("readyok")&&(console.log("Worker: Stockfish engine is ready"),r!==null&&(clearTimeout(r),r=null),d=!1,b=0,self.postMessage({type:"ready",fallbackMode:!1}),g==null||g.postMessage("setoption name Threads value 4"),g==null||g.postMessage("setoption name Hash value 128"),g==null||g.postMessage("setoption name MultiPV value 1")),g&&g.onmessage&&g.onmessage(a),typeof a=="string"){if(a.includes("bestmove")){u!=null&&u.timeoutId&&(clearTimeout(u.timeoutId),u=null);const i=a.match(/bestmove\s+(\w+)/);if(i){const l=i[1];self.postMessage({type:"bestMove",move:l,source:"stockfish"})}else self.postMessage({type:"error",message:"Failed to extract bestmove from engine output"})}else if(a.includes("info depth")&&a.includes("score"))try{const i=a.match(/depth\s+(\d+)/),l=a.match(/score cp\s+(-?\d+)/),f=a.match(/score mate\s+(-?\d+)/),p=a.match(/time\s+(\d+)/),m=a.match(/nodes\s+(\d+)/),h=a.match(/pv\s+(.+?)(?=$|info)/);if(i){const W=parseInt(i[1]);let v=0,$=!1;if(l?v=parseInt(l[1])/100:f&&(v=parseInt(f[1]),$=!0),W>1&&!a.includes("upperbound")&&!a.includes("lowerbound")){const S=p?parseInt(p[1]):void 0,I=m?parseInt(m[1]):void 0,R=h?h[1].trim():void 0;self.postMessage({type:"evaluation",data:{depth:W,score:v,isMate:$,time:S,nodes:I,pv:R}})}}}catch(i){console.error("Worker: Error parsing Stockfish output:",i)}}},n.onerror=c=>{console.error("Worker: Stockfish worker error:",c),r!==null&&(clearTimeout(r),r=null),d=!1,g=null,URL.revokeObjectURL(s),console.log("Worker: Switching to fallback mode due to worker error"),k=!0,self.postMessage({type:"ready",fallbackMode:!0,message:"Engine ready in fallback mode after worker error"})},console.log("Worker: Configuring UCI mode"),n.postMessage("uci"),setTimeout(()=>{n.postMessage("isready")},1e3)}catch(e){console.error("Worker: Error initializing Stockfish:",e),d=!1,g=null,console.log("Worker: Switching to fallback mode due to initialization error"),k=!0,self.postMessage({type:"ready",fallbackMode:!0,message:"Engine ready in fallback mode after initialization error"})}}async function B(e){console.log(`Worker: Fetching Stockfish from verified URL: ${e}`);try{const t=new AbortController,o=setTimeout(()=>t.abort(),15e3),s=await fetch(e,{signal:t.signal,mode:e.startsWith("/")?"same-origin":"cors",credentials:"omit",cache:"force-cache",headers:{Accept:"application/javascript"}});if(clearTimeout(o),!s.ok)throw new Error(`HTTP ${s.status}: ${s.statusText}`);const n=await s.text();if(!n||n.length<1e3)throw new Error("Invalid response: content too small");return console.log(`Worker: Successfully loaded Stockfish from ${e} (${n.length} bytes)`),n}catch(t){throw console.error(`Worker: Failed to fetch from verified URL ${e}:`,t),t}}
